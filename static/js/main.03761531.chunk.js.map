{"version":3,"sources":["Components/searchbar.js","Components/nav.js","Components/Card.js","Components/List.js","pages/search.js","pages/popular.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","className","action","to","onSubmit","handleSubmit","method","onChange","handleChange","type","placeholder","onClick","Nav","src","alt","Card","style","backgroundImage","img","title","List","movieList","map","movie","i","key","poster_path","original_title","description","overview","Search","useState","setMovieList","search","setSearch","name","useParams","useEffect","a","fetch","response1","json","data","results","fetchData","Popular","popularMovies","setPopular","response","popular","Routes","exact","path","component","App","history","useHistory","searchItem","e","preventDefault","alert","push","console","log","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.03761531.chunk.js","sourcesContent":["import React from \"react\";\nimport {Link} from 'react-router-dom'\n\nfunction SearchBar(props) {\n\n  return(\n      <div  className={'search'}>\n          <form action={<Link to={'/search'}>search</Link>} onSubmit={props.handleSubmit} method={\"GET\"}>\n          <input onChange={props.handleChange}  type=\"text\" placeholder={'search for a movie'}/>\n          <button type={'submit'} onClick={props.handleSubmit} ><Link to={'/search'}>search</Link></button>\n\n\n      </form>\n      </div>\n  )\n\n}\n\nexport default SearchBar;","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\n\nfunction Nav() {\nreturn(\n    <div>\n     <nav className={'nav'}>\n         <img src=\"https://www.themoviedb.org/assets/1/v4/logos/primary-green-d70eebe18a5eb5b166d5c1ef0796715b8d1a2cbc698f96d311d62f894ae87085.svg\" alt=\"\"/>\n        <div className=\"navlist\">\n         <ul>\n             <li><Link to={'/'}>home</Link></li>\n             <li><Link to={'/popular'}>popular</Link></li>\n             <li><Link to={'/top 10'}>top 10</Link></li>\n             <li  className={\"hide\"}><i >search</i></li>\n         </ul>\n        </div>\n     </nav>\n    </div>\n\n)\n}\n\nexport default Nav;","import React from \"react\";\n\nconst Card  = (props) =>{\n    return(\n        <div className={'card'} style={{backgroundImage: `url(${props.img})`}} >\n            <p className={\"titleMovie\"}>{props.title}</p>\n        </div>\n    )\n};\n\nexport default Card","import React from \"react\";\nimport Card from \"./Card.js\"\n\nfunction List(props) {\n\n     return(\n\n         <div  className={'list'}>\n               {\n                  props.movieList.map((movie, i) =>{\n                            \n                     return <Card\n                                key={i}\n                                img={`https://image.tmdb.org/t/p/w200/${movie.poster_path}`}\n                                title={movie.original_title}\n                                description={movie.overview}\n                            />\n\n                  })\n               }\n         </div>\n     )\n}\n\nexport default List;","import React, {useEffect, useState} from \"react\";\nimport List from \"../Components/List\";\nimport {useParams} from \"react-router-dom\";\n\nfunction Search(){\n\n    const  [movieList,  setMovieList]  = useState(['hey']);\n    const [search, setSearch]  = useState('');\n    const {name}= useParams();\n\n    useEffect(() => {\n        async function fetchData() {\n            //fetch stream of data\n            const response1 = await fetch(`https://api.themoviedb.org/3/search/movie/?api_key=67b347978ffe14fc5d6f8a664a1829f2&query=${name}`);\n            //convert to json\n            const data  = await response1.json();\n            //set json object into moviesList array, every time there is a new search this will refresh itself\n            setMovieList(data.results);\n            setSearch(name)\n        }\n        fetchData();\n    }, [name]);\n\n    return(\n        <div>\n            <h3>Results for: {search}</h3>\n            <List movieList={movieList}/>\n        </div>\n    )\n}\n\nexport default Search;","import React, {useEffect, useState} from \"react\";\nimport List from \"../Components/List\";\n\nfunction Popular() {\n\n    const [popularMovies, setPopular] = useState([]);\n\n    //on load, load List with popular movies\n    useEffect(() => {\n        async function fetchData() {\n            const response = await fetch (`https://api.themoviedb.org/3/movie/popular?api_key=67b347978ffe14fc5d6f8a664a1829f2&language=en-US&page=1`);\n            const popular = await response.json();\n            setPopular(popular.results);\n        }\n        fetchData();\n    }, []);\n\n\n    return(\n        <div className={'popular-container'}>\n        <h1>Popular movies</h1>\n        <List movieList={popularMovies}/>\n        </div>\n    )\n\n}\n\nexport default Popular;","import React from \"react\";\nimport {Switch, Route} from 'react-router-dom';\nimport Search from \"../src/pages/search\"\nimport Popular from \"../src/pages/popular\"\n\nconst Routes = () =>{\n    return(\n        <Switch>\n            <Route exact path=\"/\" component={Popular}/>\n            <Route exact path=\"/popular\" component={Popular}/>\n            <Route exact path=\"/top5\"/>\n            <Route exact path=\"/search/:name\" component={Search}/>\n        </Switch>\n\n    )\n};\n\nexport default Routes;","import React, {useState} from 'react';\nimport SearchBar from \"./Components/searchbar\";\nimport Nav from \"./Components/nav\";\nimport Routes from \"./routes\";\nimport {useHistory} from \"react-router-dom\";\nimport './App.css';\n\n\nfunction App() {\n  //const apiKey =  process.env.REACT_APP_API;\n  const [search, setSearch]  = useState('');\n  const  [movieList,  setMovieList]  = useState([]);\n\n\n  const history=useHistory();\n  //when user searches for a movie, fetch data and set movieList\n  const searchItem = async (e) => {\n    e.preventDefault();\n\n      if(search === \"\"){\n          alert(\"please enter a movie title\")\n      }else{\n          //fetch stream of data\n          const response1 = await fetch(`https://api.themoviedb.org/3/search/movie/?api_key=67b347978ffe14fc5d6f8a664a1829f2&query=${search}`);\n          //convert to json\n          const data  = await response1.json();\n\n          //set json object into moviesList array, every time there is a new search this will refresh itself\n          setMovieList(data.results);\n          history.push(`/search/${search}`);\n      }\n  };\n\n  //set search while  typing\n  const handleChange = (e) =>{\n      console.log(e.target.value);\n      setSearch(e.target.value);\n  };\n\n      return (\n          <div className=\"App\">\n\n              <Nav/>\n              <SearchBar\n                  handleSubmit={searchItem}\n                  handleChange={handleChange}\n              />\n              <Routes/>\n          </div>\n      )\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <BrowserRouter>\n    <App />\n          </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}