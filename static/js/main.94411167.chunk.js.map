{"version":3,"sources":["Components/searchbar.js","Components/nav.js","Components/Card.js","Components/List.js","Components/Pagination.js","pages/search.js","pages/popular.js","Components/introhome.js","pages/homeTrending.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","className","action","to","onSubmit","handleSubmit","method","onChange","handleChange","type","placeholder","onClick","Nav","useState","search","setSearch","setMovieList","history","useHistory","searchItem","e","a","preventDefault","alert","fetch","response1","json","data","results","push","src","alt","target","value","Card","style","backgroundImage","img","title","List","movieList","map","movie","i","key","poster_path","original_title","description","overview","Pagination","pagesLink","setPagesLink","pageLinks","arrayOfPageLinks","active","currentPage","nextPage","pages","arr","val","length","slice","chunkArray","Search","name","useParams","totalResults","setTotalResults","setCurrentPage","totalPages","setTotalPages","proxy","useEffect","total_pages","total_results","fetchData","currentpages","Popular","popularMovies","setPopular","response","popular","Home","id","TrendingTodayMovies","setTrending","trending","console","log","Routes","exact","path","component","homeTrending","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.94411167.chunk.js","sourcesContent":["import React from \"react\";\nimport {Link} from 'react-router-dom'\n\nfunction SearchBar(props) {\n\n  return(\n      <div  className={'search'}>\n          <form action={<Link to={'/search'}>search</Link>} onSubmit={props.handleSubmit} method={\"GET\"}>\n          <input onChange={props.handleChange}  type=\"text\" placeholder={'search for a movie'}/>\n          <button type={'submit'} onClick={props.handleSubmit} ><Link to={'/search'}>search</Link></button>\n      </form>\n      </div>\n  )\n\n}\n\nexport default SearchBar;","import React, {useState} from \"react\";\nimport {Link, useHistory} from \"react-router-dom\";\nimport SearchBar from \"./searchbar\";\n\n\nfunction Nav() {\n    //const apiKey =  process.env.REACT_APP_API;\n    const [search, setSearch]  = useState('');\n    const  [movieList,  setMovieList]  = useState([]);\n\n    const proxy = \"https://cors-anywhere.herokuapp.com/\";\n    const history= useHistory();\n\n    //when user searches for a movie, fetch data and set movieList\n    const searchItem = async (e) => {\n        e.preventDefault();\n\n        if(search === \"\"){\n            alert(\"please enter a movie title\")\n        }else{\n            //fetch stream of data\n            const response1 = await fetch(`${proxy}https://api.themoviedb.org/3/search/movie/?api_key=67b347978ffe14fc5d6f8a664a1829f2&query=${search}`);\n            //convert to json\n            const data  = await response1.json();\n\n            setMovieList(data.results);\n            history.push(`/search/${search}`);\n        }\n    };\n\n    //set search while  typing\n    const handleChange = (e) =>{\n\n        setSearch(e.target.value);\n    };\nreturn(\n    <div>\n     <nav className={'nav'}>\n         <div className={\"nav-links\"}>\n             <img src=\"https://www.themoviedb.org/assets/1/v4/logos/primary-green-d70eebe18a5eb5b166d5c1ef0796715b8d1a2cbc698f96d311d62f894ae87085.svg\" alt=\"\"/>\n             <ul>\n             <li><Link to={'/'}>home</Link></li>\n             <li><Link to={'/'}>login</Link></li>\n             <li  className={\"hide\"}><i >search</i></li>\n            </ul>\n         </div>\n         <div className={'nav-search'}>\n            <SearchBar\n                handleSubmit={searchItem}\n                handleChange={handleChange}\n            />\n         </div>\n     </nav>\n    </div>\n\n)\n}\n\nexport default Nav;","import React from \"react\";\n\nconst Card  = (props) =>{\n    return(\n        <div className={'card'} style={{backgroundImage: `url(${props.img})`}} >\n            <p className={\"titleMovie\"}>{props.title}</p>\n        </div>\n\n\n    )\n};\n\nexport default Card","import React from \"react\";\nimport Card from \"./Card.js\"\n\nfunction List(props) {\n\n     return(\n\n         <div  className={'list'}>\n               {\n                  props.movieList.map((movie, i) =>{\n                            \n                     return <Card\n                                key={i}\n                                img={`https://image.tmdb.org/t/p/w200/${movie.poster_path}`}\n                                title={movie.original_title}\n                                description={movie.overview}\n                            />\n\n                  })\n               }\n         </div>\n     )\n}\n\nexport default List;","import React, {useState} from \"react\";\nfunction Pagination(props) {\n\n    const [pagesLink, setPagesLink] =useState(0);\n    const pageLinks=[];\n    const arrayOfPageLinks=[];\n\n    //for every page, create li with its corresponding number, if page is the current page add .active class\n    for(let i =1; i <= props.pages; i++){\n        let active = props.currentPage === i ? 'active': '';\n            pageLinks.push(<li className={` ${active}`} key={i} onClick={()=>{props.nextPage(i)}}>{i}</li>)\n    }\n\n    //slice array of links in smaller arrays of ten, so that you can  display 10 pages at the time\n    function chunkArray(arr,val) {\n        for(let i =0; i <= arr.length; i += val){\n            arrayOfPageLinks.push(arr.slice(i, val + i));\n        }\n    }\n    chunkArray(pageLinks,5);\n\n    //show next set of pages, stop at last page.you could also setPagesLink to 0 to go back to the beginning of your pages\n    const Next = ()=>{\n        if(arrayOfPageLinks.length -1 === pagesLink){\n            setPagesLink(arrayOfPageLinks.length -1)\n        }else{\n            setPagesLink(pagesLink+1);\n        }\n    };\n\n    //same as next, but backwards\n    const Previous = ()=>{\n        if(pagesLink > 0){\n            setPagesLink(pagesLink-1)\n        }\n        if(pagesLink < 0){\n            setPagesLink(pagesLink);\n        }\n    };\n\n    return(\n        <div className={\"container\"}>\n            <div className=\"row\">\n                <ul className={\"pagination\"}>\n                    {pagesLink <= 0? '': <button onClick={Previous}>...</button> }\n\n                    {arrayOfPageLinks[pagesLink]}\n                    <button onClick={Next}>...</button>\n\n                </ul>\n            </div>\n        </div>\n    )\n\n}\nexport default Pagination\n","import React, {useEffect, useState} from \"react\";\nimport List from \"../Components/List\";\nimport {useParams} from \"react-router-dom\";\nimport Pagination from \"../Components/Pagination\";\n\nfunction Search() {\n\n    const [movieList, setMovieList] = useState(['hey']);\n    const [search, setSearch] = useState('');\n    const {name} = useParams();\n    const [totalResults, setTotalResults] = useState();\n\n    const [currentPage, setCurrentPage] = useState(1);\n    const [totalPages, setTotalPages] = useState();\n    const [pagesLink, setPagesLink] =useState(0);\n\n    const proxy = \"https://cors-anywhere.herokuapp.com/\";\n\n    useEffect(() => {\n        async function fetchData() {\n            //fetch stream of data\n            const response1 = await fetch(`${proxy}https://api.themoviedb.org/3/search/movie/?api_key=67b347978ffe14fc5d6f8a664a1829f2&query=${name}&page=${currentPage}`);\n            //convert to json\n            const data = await response1.json();\n\n            //set json object into moviesList array, every time there is a new search this will refresh itself\n            setMovieList(data.results);\n            setSearch(name);\n            setTotalPages(data.total_pages);\n            setTotalResults(data.total_results);\n        }\n\n        fetchData();\n    }, [name,currentPage]);\n\n\n    const nextPage = (currentPage) => {\n        setCurrentPage(currentPage);\n    };\n\n\n\n    return(\n\n        <div>\n            <h3>Results for: {search}</h3>\n            <List movieList={movieList}/>\n            <div className={\"pagination-with-btn\"}>\n\n            {totalResults > 20 ? <Pagination pagesLink={pagesLink} pages={totalPages} currentpages={currentPage}  nextPage={nextPage} currentPage={currentPage}/> : \"\"}\n\n            </div>\n        </div>\n    )\n}\n\nexport default Search;","import React, {useEffect, useState} from \"react\";\nimport List from \"../Components/List\";\n\nfunction Popular() {\n\n    const [popularMovies, setPopular] = useState([]);\n    const proxy = \"https://cors-anywhere.herokuapp.com/\";\n\n    //on load, load List with popular movies\n    useEffect(() => {\n        async function fetchData() {\n            const response = await fetch (`${proxy}https://api.themoviedb.org/3/movie/popular?api_key=67b347978ffe14fc5d6f8a664a1829f2&language=en-US&page=1\n `);\n\n\n\n            const popular = await response.json();\n            setPopular(popular.results);\n        }\n        fetchData();\n    }, []);\n\n\n    return(\n        <div className={'popular-container'}>\n        <h1>Popular movies</h1>\n        <List movieList={popularMovies}/>\n        </div>\n    )\n\n}\n\nexport default Popular;","import React from \"react\"\n\nfunction Home(props){\n\n\n        return (\n            <div className={'wrapper container'}>\n                <h1>Trending right now</h1>\n                <section className={\"carousel\"} id={\"section1\"}>\n                    {\n                        props.movieList.map((movie, i) => {\n                            return <div key={i} className={\"item\"}><img src={`https://image.tmdb.org/t/p/w200/.${movie.poster_path}`} alt=\"\"/></div>\n                        })\n                    }\n                </section>\n            </div>\n\n\n        )\n\n}\n\nexport default Home;\n","import React, {useEffect, useState} from \"react\";\nimport List from \"../Components/List\";\nimport Home from \"../Components/introhome\";\nimport Pagination from \"../Components/Pagination\";\nimport '../assets/css/slider.scss'\n\nfunction Popular() {\n\n    const [TrendingTodayMovies, setTrending] = useState([]);\n    const [popularMovies, setPopular] = useState([]);\n    const proxy = \"https://cors-anywhere.herokuapp.com/\";\n\n    const [totalResults, setTotalResults] = useState();\n\n    const [currentPage, setCurrentPage] = useState(1);\n    const [totalPages, setTotalPages] = useState();\n    const [pagesLink, setPagesLink] =useState(0);\n\n    //on load, load List with popular movies\n    useEffect(() => {\n        async function fetchData() {\n            const response = await fetch (`${proxy}https://api.themoviedb.org/3/trending/all/day?api_key=67b347978ffe14fc5d6f8a664a1829f2`);\n            const trending = await response.json();\n            setTrending(trending.results);\n        }\n        fetchData();\n    }, []);\n\n    useEffect(() => {\n        async function fetchData() {\n            const response = await fetch (`${proxy}https://api.themoviedb.org/3/movie/popular?api_key=67b347978ffe14fc5d6f8a664a1829f2&language=en-US&page=${currentPage}`);\n            const popular = await response.json();\n            setPopular(popular.results);\n            setTotalPages(popular.total_pages);\n            setTotalResults(popular.total_results);\n        }\n        fetchData();\n    }, [currentPage]);\n    console.log(TrendingTodayMovies);\n\n    const nextPage = (currentPage) => {\n        setCurrentPage(currentPage);\n    };\n\n    return(\n        <div>\n            <Home movieList={TrendingTodayMovies}/>\n\n\n        <h1>Browse all popular movies</h1>\n        <List movieList={popularMovies}/>\n            {totalResults > 20 ? <Pagination pagesLink={pagesLink} pages={totalPages} currentpages={currentPage}  nextPage={nextPage} currentPage={currentPage}/> : \"\"}\n\n        </div>\n    )\n\n}\n\nexport default Popular;\n","import React from \"react\";\nimport {Switch, Route} from 'react-router-dom';\nimport Search from \"../src/pages/search\"\nimport Popular from \"../src/pages/popular\"\nimport homeTrending from \"../src/pages/homeTrending\"\n\nconst Routes = () =>{\n    return(\n        <Switch>\n            <Route exact path=\"/\" component={homeTrending}/>\n            <Route exact path=\"/popular\" component={Popular}/>\n            <Route exact path=\"/Movie-browse\" component={Popular}/>\n            <Route exact path=\"/top5\"/>\n            <Route exact path=\"/search/:name\" component={Search}/>\n        </Switch>\n    )\n};\n\nexport default Routes;","import React, {useState} from 'react';\nimport SearchBar from \"./Components/searchbar\";\nimport Nav from \"./Components/nav\";\nimport Routes from \"./routes\";\nimport {useHistory} from \"react-router-dom\";\n\nimport './App.css';\n\n\nfunction App() {\n\n\n      return (\n          <div className=\"App\">\n              <Nav/>\n              <Routes/>\n          </div>\n      )\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <HashRouter>\n            <App />\n      </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}