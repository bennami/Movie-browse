{"version":3,"sources":["utils.js","Api/apiUtils.js","Components/commons/searchbar.js","Api/movieApi.js","Components/commons/nav.js","Components/Card.js","Components/commons/List.js","Components/commons/Pagination.js","pages/movieProfile/movieProfile.js","Components/commons/spinner/Spinner.js","pages/search.js","pages/popular.js","pages/Homepage.js","pages/PageNotFound.js","routes.js","App.js","serviceWorker.js","redux/reducers/initialState.js","redux/reducers/index.js","redux/reducers/homePageReducer.js","redux/actions/actionTypes.js","index.js","redux/configureStore.js"],"names":["API_KEY","BASE_URL","PROXY","handleResponse","response","a","ok","json","status","text","error","console","log","Error","handleError","SearchBar","props","useState","searchInput","setSearchInput","setSearchResults","history","useHistory","searchItem","e","preventDefault","alert","name","currentPage","fetch","then","catch","results","push","className","action","to","onSubmit","onChange","target","value","type","placeholder","onClick","prototype","searchResults","PropTypes","array","isRequired","Nav","src","alt","Card","href","viewMovieInfo","movieId","style","backgroundImage","img","title","List","movieList","map","movie","i","key","poster_path","original_title","description","overview","id","Pagination","pagesLink","setPagesLink","pageLinks","arrayOfPageLinks","active","nextPage","pages","arr","val","length","slice","chunkArray","MovieProfile","currentMovie","vote_average","release_date","backdrop_path","genre_ids","display","size","closeMovieInfo","color","cursor","substr","genre","Spinner","Search","setMovieList","search","setSearch","useParams","movieGenres","setCurrentPage","totalPages","setTotalPages","setCurrentMovie","useEffect","data","total_pages","fetchData","filteredMovie","filter","newCurrentMovie","currentpages","Popular","popularMovies","setPopular","proxy","popular","HomePage","setTrending","setTotalResults","setMovieGenres","trending","genres","fetchMovieGenres","total_results","PageNotFound","Routes","exact","path","component","Homepage","App","Boolean","window","location","hostname","match","trendingMovies","PopularMovies","currentMovieProfile","apiCallsInProgress","rootReducer","combineReducers","homePageReducer","state","initialState","store","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","reduxImmutableStateInvariant","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.90adca08.chunk.js","sourcesContent":["import {useState} from \"react\";\n\nexport const API_KEY = '?api_key=67b347978ffe14fc5d6f8a664a1829f2';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\nexport const VIDEO_LINK = 'https://api.themoviedb.org/3/movie/';\nexport const PROXY = 'https://cors-anywhere.herokuapp.com/';\nexport const URL_DETAIL = 'https://api.themoviedb.org/3/movie/';\nexport const URL_SEARCH = `https://api.themoviedb.org/3/search/movie${API_KEY}?query=`;\nexport const IMG_SIZE_45 = 'https://image.tmdb.org/t/p/w45/';\nexport const IMG_BASE_200 = 'https://image.tmdb.org/t/p/w200/';\nexport const IMG_BASE_1280 = 'https://image.tmdb.org/t/p/w1280/';\nexport const LOGO_NAV = 'https://www.themoviedb.org/assets/1/v4/logos/primary-green-d70eebe18a5eb5b166d5c1ef0796715b8d1a2cbc698f96d311d62f894ae87085.svg';\n\nexport const nextPage = (setCurrentPage,currentPage) => {\n    setCurrentPage(currentPage);\n};\n\n\n\n","export async function handleResponse(response) {\n    if (response.ok)return response.json();\n    if (response.status === 400) {\n        // So, a server-side validation error occurred.\n        // Server side validation returns a string error message, so parse as text instead of json.\n        const error = await response.text();\n        console.log(error);\n        throw new Error('404 error');\n    }\n    //throw new Error(\"Network response was not ok.\");\n}\n\n// In a real app, would likely call an error logging service.\nexport function handleError(error) {\n    // eslint-disable-next-line no-console\n    console.error(\"API call failed. \" + error);\n    throw error;\n}\n","import React, {useState} from \"react\";\nimport {Link, useHistory} from 'react-router-dom';\nimport PropTypes from 'prop-types'\nimport {API_KEY} from \"../../utils\";\nimport {loadSearch} from \"../../Api/movieApi\";\n\nimport mapStateToProps from \"react-redux/lib/connect/mapStateToProps\";\n\nfunction SearchBar(props) {\n\n    const [searchInput, setSearchInput] =  useState();\n    const [searchResults,  setSearchResults]  = useState([]);\n    const history= useHistory();\n\n    //when user searches for a movie, fetch data and set movieList\n    const searchItem = async (e) => {\n        e.preventDefault();\n        if(searchInput === \"\"){\n            alert(\"please enter a movie title\")\n        }else{\n            loadSearch(searchInput,1)\n\n            setSearchResults(searchInput.results);\n            history.push(`/search/${searchInput}`);\n        }\n    };\n\n\n\n    //set search while typing\n    const handleChange = (e) =>{\n        setSearchInput(e.target.value);\n    };\n\n  return(\n      <div  className={'search'}>\n          <form action={<Link to={'/search'}>search</Link>} onSubmit={searchItem}>\n          <input onChange={handleChange}  type=\"text\" placeholder={'search for a movie'} />\n          <button type={'submit'} onClick={searchItem}><Link to={'/search'}>search</Link></button>\n      </form>\n      </div>\n  )\n\n}\nSearchBar.prototype={\n    searchResults:  PropTypes.array.isRequired\n}\n\n/*mapStateToProps(state.currentPage,ownProps){\n    return {searchInput: state.searchInput,};\n}*/\n\nexport default SearchBar;\n","import { handleResponse, handleError } from \"./apiUtils\";\nimport {API_KEY, BASE_URL,PROXY} from \"../utils\";\n\nexport function loadTrendyMovies() {\n    return fetch(`${PROXY}${BASE_URL}/trending/all/day${API_KEY}`)\n        .then(handleResponse)\n        .catch(handleError);\n\n}\n\nexport function loadSearch(name,currentPage) {\n    return fetch(`${PROXY}${BASE_URL}search/movie/${API_KEY}&query=${name}&page=${currentPage}`)\n        .then(handleResponse)\n        .catch(handleError);\n}\nexport function getPopularMovies(currentPage) {\n    return fetch(`${PROXY}${BASE_URL}/movie/popular/all/day${API_KEY}&page=${currentPage}`)\n        .then(handleResponse)\n        .catch(handleError);\n}\n\nexport function getGenreMovies() {\n    return fetch(BASE_URL)\n        .then(handleResponse)\n        .catch(handleError);\n}\n\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {LOGO_NAV} from \"../../utils\";\nimport SearchBar from \"./searchbar\";\n\nconst Nav =()=> (\n    <div>\n     <nav className={'nav'}>\n         <div className={\"nav-links\"}>\n             <img src={LOGO_NAV} alt=\"\"/>\n             <ul>\n             <li><Link to={'/'}>home</Link></li>\n             <li><Link to={'/login'}>login</Link></li>\n             <li className={\"hide\"}><i >search</i></li>\n             </ul>\n         </div>\n         <div className={'nav-search'}>\n            <SearchBar/>\n         </div>\n     </nav>\n    </div>\n)\n\n\nexport default Nav;\n","import React from \"react\";\n\nconst Card  = (props) =>{\n    return(\n\n            <a href={'#'} onClick={()=> props.viewMovieInfo(props.movieId)}>\n                <div className={'cardMovie'} style={{backgroundImage: `url(${props.img})`}} />\n                <p className={\"titleMovie\"}>{props.title}</p>\n           </a>\n\n\n    )\n};\n\nexport default Card\n","import React from \"react\";\nimport Card from \"../Card.js\"\nimport {IMG_BASE_200} from \"../../utils\";\n\nconst List =({movieList,viewMovieInfo}) =>(\n    <div  className={'list'}>\n       {\n         movieList.map((movie, i) =>{\n             return <Card\n                        key={i}\n                        img={`${IMG_BASE_200}${movie.poster_path}`}\n                        title={movie.original_title}\n                        description={movie.overview}\n                        viewMovieInfo={viewMovieInfo}\n                        movieId={movie.id}\n                    />\n             })\n       }\n    </div>\n)\n\nexport default List;\n","import React, {useState} from \"react\";\nfunction Pagination(props) {\n\n    const [pagesLink, setPagesLink]= useState(0);\n    const pageLinks=[];\n    const arrayOfPageLinks=[];\n\n    //for every page, create li with its corresponding number, if page is the current page add .active class\n    for(let i =1; i <= props.pages; i++){\n        let active = props.currentPage === i ? 'active': '';\n            pageLinks.push(<li className={` ${active}`} key={i} onClick={()=>{props.nextPage(i)}}>{i}</li>)\n    }\n\n    //slice array of links in smaller arrays of ten, so that you can  display 10 pages at the time\n    function chunkArray(arr,val) {\n        for(let i =0; i <= arr.length; i += val){\n            arrayOfPageLinks.push(arr.slice(i, val + i));\n        }\n    }\n    chunkArray(pageLinks,5);\n\n    //show next set of pages, stop at last page.you could also setPagesLink to 0 to go back to the beginning of your pages\n    const Next = ()=>{\n        if(arrayOfPageLinks.length -1 === pagesLink){\n            setPagesLink(arrayOfPageLinks.length -1)\n        }else{\n            setPagesLink(pagesLink+1);\n        }\n    };\n\n    //same as next, but backwards\n    const Previous = ()=>{\n        if(pagesLink > 0){\n            setPagesLink(pagesLink-1)\n        }\n        if(pagesLink < 0){\n            setPagesLink(pagesLink);\n        }\n    };\n\n    return(\n        <div className={\"container\"}>\n            <div className=\"row\">\n                <ul className={\"pagination\"}>\n                    {pagesLink <= 0\n                        ? ''\n                        :\n                        <>\n                        <button onClick={Previous}>...</button>\n                        <button>prev</button>\n                        </>\n                    }\n                    {arrayOfPageLinks[pagesLink]}\n                    <button onClick={props.nextPage}>next</button>\n                    <button onClick={Next}>...</button>\n\n                </ul>\n            </div>\n        </div>\n    )\n\n}\nexport default Pagination\n","import React from 'react';\nimport {IMG_BASE_1280} from \"../../utils\";\nimport './movieProfile.scss'\n\nfunction MovieProfile(props) {\n\n    const {vote_average, release_date, backdrop_path, overview, poster_path, genre_ids, title} = props.currentMovie;\n\n    /* const [genre, setGenre] = useState();\n    function isGenre() {\n        return props.genre.id === genre_ids[0]\n\n    }*/\n\n    return (\n        <>\n            <div className={\"container-profile bg\"}\n                 style={{backgroundImage: `url(${IMG_BASE_1280}${backdrop_path})`}}\n            >\n                <div className={'content'}>\n                    <div className={\"icon\"} style={{display:\"flex\"}}>\n                        <ion-icon size=\"large\" name=\"close-outline\" onClick={props.closeMovieInfo} style={{color: \"whitesmoke\", cursor: \"pointer\"}}/>\n                    </div>\n                    <div className={\"profile-img\"}>\n                        <img src={`https://image.tmdb.org/t/p/w500/${poster_path}`} alt={title}/>\n                    </div>\n                    <div className=\"profile-text\">\n                        <h2>{title}</h2>\n                            <div className={'sub-title'}>\n                                <p><small>{vote_average === 0 ? \"\": `Rating: ${vote_average}` } </small></p>\n                                <p> <small>Release date: {release_date.substr(0,4)} </small></p>\n                                <p> <small> trailer </small></p>\n                            </div>\n                        <br/>\n                        <p>\n                            {\n                                genre_ids.map(id => {\n                                    if (id === props.genre.id) {\n                                        console.log(props.genre.name);\n                                        return props.genre.name\n                                    } else {\n                                        return \"\"\n                                    }\n                                })\n                            }\n                        </p>\n                        <p>{overview}</p>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default MovieProfile;\n","import React from 'react';\nimport \"./spinner.css\"\n\nconst Spinner =() =>{\n    return<div className={\"loader\"}>Loading...</div>\n};\nexport default Spinner;\n","import React, {useEffect, useState} from \"react\";\nimport List from \"../Components/commons/List\";\nimport {useParams} from \"react-router-dom\";\nimport {API_KEY,PROXY,nextPage} from \"../utils\";\nimport Pagination from \"../Components/commons/Pagination\";\nimport MovieProfile from \"./movieProfile/movieProfile\";\nimport Spinner from \"../Components/commons/spinner/Spinner\";\n\nfunction Search() {\n\n    const [movieList, setMovieList] = useState([]);\n    const [search, setSearch] = useState('');\n    const {name} = useParams();\n    const [movieGenres, setMovieGenres] =useState([]);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [totalPages, setTotalPages] = useState();\n    const [pagesLink] = useState(0);\n    const [currentMovie, setCurrentMovie] = useState(null)\n\n    useEffect(() => {\n        async function fetchData() {\n            setMovieList(null)\n            //fetch stream of data\n            const response = await fetch(`${PROXY}https://api.themoviedb.org/3/search/movie/${API_KEY}&query=${name}&page=${currentPage}`);\n            //convert to json\n            const data = await response.json();\n            //set json object into moviesList array, every time there is a new search this will refresh itself\n            setMovieList(data.results);\n            setSearch(name);\n            setTotalPages(data.total_pages);\n\n        }\n        fetchData();\n    }, [name,currentPage]);\n\n    const viewMovieInfo = (id) =>{\n        const filteredMovie = movieList.filter(movie => movie.id === id);\n        const newCurrentMovie = filteredMovie.length > 0 ? filteredMovie[0]: null;\n        setCurrentMovie(newCurrentMovie);\n    };\n\n    const  closeMovieInfo = () => {\n        setCurrentMovie( null);\n    };\n\n    const nextPage = (currentPage) => {\n        setCurrentPage(currentPage);\n    };\n    return(\n\n        <div>\n            {currentMovie === null\n             ?\n            <>\n            <h3>Results for: {search}</h3>\n                {\n                    movieList === null\n                    ?\n                        <Spinner/>\n                    :\n                    <>\n                    <List movieList={movieList} viewMovieInfo={viewMovieInfo}/>\n                    <div className={\"pagination-with-btn\"}>\n                    <Pagination pagesLink={pagesLink} pages={totalPages} currentpages={currentPage}  nextPage={nextPage} currentPage={currentPage}/>\n                    </div>\n                    </>\n                }\n\n            </>\n            :\n            <MovieProfile viewMovieInfo={viewMovieInfo} genre={movieGenres} currentMovie={currentMovie} closeMovieInfo={closeMovieInfo}/>\n            }\n\n\n       </div>\n    )\n\n}\n\nexport default Search;\n","import React, {useEffect, useState} from \"react\";\nimport List from \"../Components/commons/List\";\n\nfunction Popular() {\n\n    const [popularMovies, setPopular] = useState([]);\n    const proxy = \"https://cors-anywhere.herokuapp.com/\";\n\n    //on load, load List with popular movies\n    useEffect(() => {\n        async function fetchData() {\n            const response = await fetch (`${proxy}https://api.themoviedb.org/3/movie/popular?api_key=67b347978ffe14fc5d6f8a664a1829f2&language=en-US&page=1\n `);\n\n\n\n            const popular = await response.json();\n            setPopular(popular.results);\n        }\n        fetchData();\n    }, []);\n\n\n    return(\n        <div className={'popular-container'}>\n        <h1>Popular movies</h1>\n        <List movieList={popularMovies}/>\n        </div>\n    )\n\n}\n\nexport default Popular;\n","import React, {useEffect, useState} from \"react\";\nimport List from \"../Components/commons/List\";\nimport Pagination from \"../Components/commons/Pagination\";\nimport MovieProfile from './movieProfile/movieProfile';\nimport SlickSlider from \"../Components/slick-slider/slick-slider\";\nimport {PROXY, API_KEY,BASE_URL} from \"../utils\";\nimport \"./App.scss\"\n\nfunction HomePage() {\n    const [TrendingTodayMovies, setTrending] = useState([]);\n    const [popularMovies, setPopular] = useState([]);\n    const [totalResults, setTotalResults] = useState();\n    const [currentPage, setCurrentPage] = useState(1);\n    const [totalPages, setTotalPages] = useState();\n    const [pagesLink] = useState(0);\n    const [currentMovie, setCurrentMovie] = useState(null);\n    const [movieGenres, setMovieGenres] = useState([]);\n\n\n    //on load, fetch trending, popular and movieGenres\n    useEffect(() => {\n        async function fetchData() {\n            const response = await fetch (`${PROXY}${BASE_URL}/trending/all/day${API_KEY}`);\n            const trending = await response.json();\n            setTrending(trending.results);\n        }\n        fetchData();\n\n        async function fetchMovieGenres() {\n            const response = await fetch (`${PROXY}${BASE_URL}/genre/movie/list${API_KEY}&language=en-US`);\n            const genres = await response.json();\n            setMovieGenres(genres);\n        }\n        fetchMovieGenres();\n    }, []);\n\n    useEffect(() => {\n        async function fetchData() {\n            const response = await fetch (`${PROXY}${BASE_URL}/movie/popular${API_KEY}&language=en-US&page=${currentPage}`);\n            const popular = await response.json();\n            setPopular(popular.results);\n            setTotalPages(popular.total_pages);\n            setTotalResults(popular.total_results);\n        }\n        fetchData();\n    }, [currentPage]);\n\n\n    const nextPage = (currentPage) => {\n        setCurrentPage(currentPage);\n    };\n\n    const viewMovieInfo = (id) =>{\n        const filteredMovie = popularMovies.filter(movie => movie.id === id);\n        const newCurrentMovie = filteredMovie.length > 0 ? filteredMovie[0]: null;\n        setCurrentMovie(newCurrentMovie);\n\n    };\n\n   const  closeMovieInfo = () => {\n        setCurrentMovie( null);\n    };\n\n    return(\n        <div>\n            {currentMovie === null\n             ?\n            <>\n                {/*<SlickSlider/>*/}\n                <h1>Browse all popular movies</h1>\n                <List\n                    movieList={popularMovies}\n                    viewMovieInfo={viewMovieInfo}\n                />\n                <Pagination\n                     pagesLink={pagesLink}\n                     pages={totalPages}\n                     currentpages={currentPage}\n                     nextPage={nextPage}\n                     currentPage={currentPage}\n                />\n            </>\n            :\n                <MovieProfile\n                    viewMovieInfo={viewMovieInfo}\n                    genre={movieGenres}\n                    currentMovie={currentMovie}\n                    closeMovieInfo={closeMovieInfo}/>\n            }\n        </div>\n    )\n\n}\nexport default HomePage;\n\n\n\n\n","import React from 'react'\n\nconst PageNotFound = () => <h1>Oops! page not found.</h1>;\n\nexport default PageNotFound\n","import React from \"react\";\nimport {Switch, Route} from 'react-router-dom';\nimport Search from \"../src/pages/search\"\nimport Popular from \"../src/pages/popular\"\nimport Homepage from \"./pages/Homepage\"\nimport PageNotFound from \"./pages/PageNotFound\"\nimport MovieProfile from \"./pages/movieProfile/movieProfile\";\n\nconst Routes = () =>{\n    return(\n        <Switch>\n            <Route exact path=\"/\" component={Homepage}/>\n           {/* <Route exact path=\"/:MovieProfile\" component={MovieProfile()}/>*/}\n            <Route exact path=\"/popular\" component={Popular}/>\n            <Route exact path=\"/Movie-browse\" component={Homepage}/>\n            <Route exact path=\"/top5\"/>\n            <Route exact path=\"/search/:name\" component={Search}/>\n            <Route component={PageNotFound}/>\n        </Switch>\n    )\n};\n\nexport default Routes;\n","import React from 'react';\nimport Nav from \"./Components/commons/nav\";\nimport Routes from \"./routes\";\nimport './App.css';\n\n  export function App() {\n          return (\n              <div className=\"App\">\n                  <Nav/>\n                  <Routes/>\n              </div>\n          )\n    }\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default {\n    searchInput:'',\n    currentPage: 1,\n    trendingMovies: [],\n    PopularMovies: [],\n    currentMovieProfile:[],\n    searchResults:[],\n    apiCallsInProgress: 0\n};\n","import {combineReducers} from \"redux\";\nimport homePageReducer from \"./homePageReducer\";\n\nconst rootReducer = combineReducers({\n    homePageReducer,\n\n});\nexport default rootReducer;\n","import * as types from \"../actions/actionTypes\";\nimport initialState from \"./initialState\";\n\nexport default function homePageReducer(state = initialState.trendingMovies, action) {\n    switch (action.type) {\n        case types.LOAD_TRENDY_MOVIES_SUCCESS:\n            return action.trendingMovies;\n        default:\n            return state;\n    }\n}\n","export const LOAD_TRENDY_MOVIES_SUCCESS = 'LOAD_TRENDY_MOVIES_SUCCESS ';\nexport const BEGIN_API_CALL ='BEGIN_API_CALL';\nexport const API_CALL_ERROR = 'API_CALL_ERROR';\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport configureStore from \"./redux/configureStore\";\nimport {Provider as ReduxProvider} from 'react-redux'\n\nlet  store =  configureStore();\n\nReactDOM.render(\n    <ReduxProvider store={store}>\n      <HashRouter>\n            <App />\n      </HashRouter>\n    </ReduxProvider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {createStore, applyMiddleware,compose} from \"redux\";\nimport rootReducer from \"./reducers\";\nimport reduxImmutableStateInvariant from 'redux-immutable-state-invariant'\nimport thunk from \"redux-thunk\";\n\nexport default function configureStore(initialState) {\n\n    //this adds support for redux dev tools\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n    return createStore(\n        rootReducer,\n        initialState,\n        composeEnhancers(applyMiddleware(thunk,reduxImmutableStateInvariant()))\n    );\n}\n"],"sourceRoot":""}