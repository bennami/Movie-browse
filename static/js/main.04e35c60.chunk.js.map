{"version":3,"sources":["Components/commons/searchbar.js","Components/commons/nav.js","Components/Card.js","Components/commons/List.js","utils.js","Components/commons/Pagination.js","pages/movieProfile/movieProfile.js","pages/search.js","pages/popular.js","Components/slick-slider/slick-slider.js","pages/Homepage.js","pages/PageNotFound.js","routes.js","App.js","serviceWorker.js","redux/reducers/initialState.js","redux/reducers/index.js","redux/reducers/homePageReducer.js","redux/actions/actionTypes.js","index.js","redux/configureStore.js"],"names":["SearchBar","props","className","action","to","onSubmit","handleSubmit","onChange","handleChange","type","placeholder","onClick","Nav","useState","search","setSearch","setMovieList","history","useHistory","searchItem","e","a","preventDefault","alert","fetch","response1","json","data","results","push","src","alt","target","value","Card","href","viewMovieInfo","movieId","style","backgroundImage","img","title","List","movieList","map","movie","i","key","poster_path","original_title","description","overview","id","API_KEY","PROXY","Pagination","pagesLink","setPagesLink","pageLinks","arrayOfPageLinks","active","currentPage","nextPage","pages","arr","val","length","slice","chunkArray","MovieProfile","currentMovie","vote_average","release_date","backdrop_path","genre_ids","size","name","closeMovieInfo","color","cursor","substr","genre","console","log","Search","useParams","setTotalResults","movieGenres","setCurrentPage","totalPages","setTotalPages","setCurrentMovie","useEffect","total_pages","total_results","fetchData","filteredMovie","filter","newCurrentMovie","currentpages","Popular","popularMovies","setPopular","proxy","response","popular","SlickSlider","TrendingTodayMovies","setTrending","trending","settings","dots","fade","infinite","speed","slidesToShow","autoplay","arrows","lazyLoad","HomePage","setMovieGenres","genres","fetchMovieGenres","PageNotFound","Routes","exact","path","component","Homepage","App","Boolean","window","location","hostname","match","TrendingMovies","PopularMovies","currentMovieProfile","searchResults","apiCallsInProgress","rootReducer","combineReducers","homePageReducer","state","initialState","movies","store","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","reduxImmutableStateInvariant","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.04e35c60.chunk.js","sourcesContent":["import React from \"react\";\nimport {Link} from 'react-router-dom'\nimport '../../assets/css/searchBar.scss'\nfunction SearchBar(props) {\n\n  return(\n      <div  className={'search'}>\n          <form action={<Link to={'/search'}>search</Link>} onSubmit={props.handleSubmit}>\n          <input onChange={props.handleChange}  type=\"text\" placeholder={'search for a movie'}/>\n          <button type={'submit'} onClick={props.handleSubmit} ><Link to={'/search'}>search</Link></button>\n      </form>\n      </div>\n  )\n\n}\n\nexport default SearchBar;\n","import React, {useState} from \"react\";\nimport {Link, useHistory} from \"react-router-dom\";\nimport SearchBar from \"./searchbar\";\n\n\nfunction Nav() {\n    //const apiKey =  process.env.REACT_APP_API;\n    const [search, setSearch]  = useState('');\n    const  [movieList,  setMovieList]  = useState([]);\n    const proxy = \"https://cors-anywhere.herokuapp.com/\";\n    const history= useHistory();\n\n    //when user searches for a movie, fetch data and set movieList\n    const searchItem = async (e) => {\n        e.preventDefault();\n\n        if(search === \"\"){\n            alert(\"please enter a movie title\")\n        }else{\n            //fetch stream of data\n            const response1 = await fetch(`${proxy}https://api.themoviedb.org/3/search/movie/?api_key=67b347978ffe14fc5d6f8a664a1829f2&query=${search}`);\n            //convert to json\n            const data  = await response1.json();\n\n            setMovieList(data.results);\n            history.push(`/search/${search}`);\n        }\n    };\n\n    //set search while  typing\n    const handleChange = (e) =>{\n\n        setSearch(e.target.value);\n    };\nreturn(\n    <div>\n     <nav className={'nav'}>\n         <div className={\"nav-links\"}>\n             <img src=\"https://www.themoviedb.org/assets/1/v4/logos/primary-green-d70eebe18a5eb5b166d5c1ef0796715b8d1a2cbc698f96d311d62f894ae87085.svg\" alt=\"\"/>\n             <ul>\n             <li><Link to={'/'}>home</Link></li>\n             <li><Link to={'/login'}>login</Link></li>\n             <li  className={\"hide\"}><i >search</i></li>\n            </ul>\n         </div>\n         <div className={'nav-search'}>\n            <SearchBar\n                handleSubmit={searchItem}\n                handleChange={handleChange}\n            />\n         </div>\n     </nav>\n    </div>\n\n)\n}\n\nexport default Nav;\n","import React from \"react\";\n\nconst Card  = (props) =>{\n    return(\n\n            <a href={'#'} onClick={()=> props.viewMovieInfo(props.movieId)}>\n                <div className={'cardMovie'} style={{backgroundImage: `url(${props.img})`}} />\n                <p className={\"titleMovie\"}>{props.title}</p>\n           </a>\n\n\n    )\n};\n\nexport default Card\n","import React from \"react\";\nimport Card from \"../Card.js\"\n\nfunction List(props) {\n\n     return(\n\n         <div  className={'list'}>\n               {\n                  props.movieList.map((movie, i) =>{\n\n                     return <Card\n                                key={i}\n                                img={`https://image.tmdb.org/t/p/w200/${movie.poster_path}`}\n                                title={movie.original_title}\n                                description={movie.overview}\n                                viewMovieInfo={props.viewMovieInfo}\n                                movieId={movie.id}\n                            />\n\n                  })\n               }\n         </div>\n     )\n}\n\nexport default List;\n","import {useState} from \"react\";\n\nexport const API_KEY = '?api_key=67b347978ffe14fc5d6f8a664a1829f2';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\nexport const BASE_IMG_URL= \"https://image.tmdb.org/t/p/w200/\";\nexport const VIDEO_LINK = 'https://api.themoviedb.org/3/movie/';\nexport const  PROXY = 'https://cors-anywhere.herokuapp.com/';\nexport const URL_DETAIL = 'https://api.themoviedb.org/3/movie/';\nexport const URL_SEARCH = `https://api.themoviedb.org/3/search/movie${API_KEY}?query=`;\nexport const URL_BACKDROP_IMG = 'https://image.tmdb.org/t/p/w1280';\nexport const API_KEY_ALT = '&api_key=a2df3d1a7611194432bbdf1fc80540f2';\nexport const IMG_SIZE_XSMALL = 'https://image.tmdb.org/t/p/w45/';\n\n/*const [TrendingTodayMovies, setTrending] = useState([]);\nconst [popularMovies, setPopular] = useState([]);\nconst [totalResults, setTotalResults] = useState();\nconst [currentPage, setCurrentPage] = useState(1);\nconst [totalPages, setTotalPages] = useState();\nconst [pagesLink, setPagesLink] =useState(0);\nconst [currentMovie, setCurrentMovie] = useState(null);\nconst [movieGenres, setMovieGenres] =useState([]);*/\n\n\n\n\n\n","import React, {useState} from \"react\";\nfunction Pagination(props) {\n\n    const [pagesLink, setPagesLink] =useState(0);\n    const pageLinks=[];\n    const arrayOfPageLinks=[];\n\n    //for every page, create li with its corresponding number, if page is the current page add .active class\n    for(let i =1; i <= props.pages; i++){\n        let active = props.currentPage === i ? 'active': '';\n            pageLinks.push(<li className={` ${active}`} key={i} onClick={()=>{props.nextPage(i)}}>{i}</li>)\n    }\n\n    //slice array of links in smaller arrays of ten, so that you can  display 10 pages at the time\n    function chunkArray(arr,val) {\n        for(let i =0; i <= arr.length; i += val){\n            arrayOfPageLinks.push(arr.slice(i, val + i));\n        }\n    }\n    chunkArray(pageLinks,5);\n\n    //show next set of pages, stop at last page.you could also setPagesLink to 0 to go back to the beginning of your pages\n    const Next = ()=>{\n        if(arrayOfPageLinks.length -1 === pagesLink){\n            setPagesLink(arrayOfPageLinks.length -1)\n        }else{\n            setPagesLink(pagesLink+1);\n        }\n    };\n\n    //same as next, but backwards\n    const Previous = ()=>{\n        if(pagesLink > 0){\n            setPagesLink(pagesLink-1)\n        }\n        if(pagesLink < 0){\n            setPagesLink(pagesLink);\n        }\n    };\n\n    return(\n        <div className={\"container\"}>\n            <div className=\"row\">\n                <ul className={\"pagination\"}>\n                    {pagesLink <= 0? '': <button onClick={Previous}>...</button> }\n\n                    {arrayOfPageLinks[pagesLink]}\n                    <button onClick={Next}>...</button>\n\n                </ul>\n            </div>\n        </div>\n    )\n\n}\nexport default Pagination\n","import React, {useState} from 'react';\nimport \"../../utils\"\nimport './movieProfile.scss'\n\nfunction MovieProfile(props) {\n\n    const {vote_average, release_date, backdrop_path, overview, poster_path, genre_ids, title} = props.currentMovie;\n\n    /* const [genre, setGenre] = useState();\n    function isGenre() {\n        return props.genre.id === genre_ids[0]\n\n    }*/\n\n    return (\n        <>\n            <div className={\"container-profile bg\"}\n                 style={{backgroundImage: `url(https://image.tmdb.org/t/p/w1280/${backdrop_path})`}}\n            >\n                <div className={'content'}>\n                    <div  className={'cross'}>\n                        <ion-icon size=\"large\" name=\"close-outline\" onClick={props.closeMovieInfo} style={{color: \"whitesmoke\", cursor: \"pointer\"}}/>\n                    </div>\n                    <div className={\"info\"}>\n                        <div className={\"profile-img\"}>\n                            <img src={`https://image.tmdb.org/t/p/w500/${poster_path}`} alt={title}/>\n                        </div>\n                        <div className=\"profile-text\">\n                        <h2>{title}</h2>\n                            <div className={'sub-title'}>\n                                <p><small>{vote_average === 0 ? \"\": `Rating: ${vote_average}` } </small></p>\n                                <p> <small>Release date: {release_date.substr(0,4)} </small></p>\n                                <p> <small> trailer </small></p>\n                            </div>\n                        <br/>\n                        <p>\n                            {\n                                genre_ids.map(id => {\n                                    if (id === props.genre.id) {\n                                        console.log(props.genre.name);\n                                        return props.genre.name\n                                    } else {\n                                        return \"\"\n                                    }\n                                })\n                            }\n                        </p>\n                        <p>{overview}</p>\n                    </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default MovieProfile;\n","import React, {useEffect, useState} from \"react\";\nimport List from \"../Components/commons/List\";\nimport {useParams} from \"react-router-dom\";\nimport {API_KEY,PROXY} from \"../utils\";\nimport Pagination from \"../Components/commons/Pagination\";\nimport MovieProfile from \"./movieProfile/movieProfile\";\n\nfunction Search() {\n\n    const [movieList, setMovieList] = useState([]);\n    const [search, setSearch] = useState('');\n    const {name} = useParams();\n    const [totalResults, setTotalResults] = useState();\n    const [movieGenres, setMovieGenres] =useState([]);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [totalPages, setTotalPages] = useState();\n    const [pagesLink] = useState(0);\n    const [currentMovie, setCurrentMovie] = useState(null);\n\n    useEffect(() => {\n        async function fetchData() {\n            //fetch stream of data\n            const response1 = await fetch(`${PROXY}https://api.themoviedb.org/3/search/movie/${API_KEY}&query=${name}&page=${currentPage}`);\n            //convert to json\n            const data = await response1.json();\n            //set json object into moviesList array, every time there is a new search this will refresh itself\n            setMovieList(data.results);\n            setSearch(name);\n            setTotalPages(data.total_pages);\n            setTotalResults(data.total_results);\n        }\n        fetchData();\n    }, [name,currentPage]);\n\n\n    const nextPage = (currentPage) => {\n        setCurrentPage(currentPage);\n    };\n\n\n    const viewMovieInfo = (id) =>{\n        const filteredMovie = movieList.filter(movie => movie.id === id);\n        const newCurrentMovie = filteredMovie.length > 0 ? filteredMovie[0]: null;\n        setCurrentMovie(newCurrentMovie);\n    };\n\n    const  closeMovieInfo = () => {\n        setCurrentMovie( null);\n    };\n\n\n    return(\n\n        <div>\n            {currentMovie === null\n             ?\n            <>\n            <h3>Results for: {search}</h3>\n            <List movieList={movieList} viewMovieInfo={viewMovieInfo}/>\n            <div className={\"pagination-with-btn\"}>\n            <Pagination pagesLink={pagesLink} pages={totalPages} currentpages={currentPage}  nextPage={nextPage} currentPage={currentPage}/>\n            </div>\n            </>\n            :\n            <MovieProfile viewMovieInfo={viewMovieInfo} genre={movieGenres} currentMovie={currentMovie} closeMovieInfo={closeMovieInfo}/>\n            }\n            </div>\n    )\n\n}\n\nexport default Search;\n","import React, {useEffect, useState} from \"react\";\nimport List from \"../Components/commons/List\";\n\nfunction Popular() {\n\n    const [popularMovies, setPopular] = useState([]);\n    const proxy = \"https://cors-anywhere.herokuapp.com/\";\n\n    //on load, load List with popular movies\n    useEffect(() => {\n        async function fetchData() {\n            const response = await fetch (`${proxy}https://api.themoviedb.org/3/movie/popular?api_key=67b347978ffe14fc5d6f8a664a1829f2&language=en-US&page=1\n `);\n\n\n\n            const popular = await response.json();\n            setPopular(popular.results);\n        }\n        fetchData();\n    }, []);\n\n\n    return(\n        <div className={'popular-container'}>\n        <h1>Popular movies</h1>\n        <List movieList={popularMovies}/>\n        </div>\n    )\n\n}\n\nexport default Popular;\n","import React,{useState,useEffect} from 'react';\nimport 'slick-carousel/slick/slick.css'\nimport 'slick-carousel/slick/slick-theme.css'\nimport Slider from \"react-slick\";\nimport './slick-slider.css';\n\nfunction SlickSlider() {\n\n    const [TrendingTodayMovies, setTrending] = useState([]);\n    const proxy = \"https://cors-anywhere.herokuapp.com/\";\n\n    //on load, load List with popular movies\n    useEffect(() => {\n        async function fetchData() {\n            const response = await fetch (`${proxy}https://api.themoviedb.org/3/trending/all/day?api_key=67b347978ffe14fc5d6f8a664a1829f2`);\n            const trending = await response.json();\n            setTrending(trending.results);\n        }\n        fetchData();\n    }, [TrendingTodayMovies]);\n\n    const settings = {\n        dots: false,\n        fade: true,\n        infinite: true,\n        speed: 200,\n        slidesToShow: 1,\n        autoplay: true,\n        arrows: true,\n        className: 'slides',\n        lazyLoad: true,\n    };\n\n    return (\n        <div className=\"App\">\n            <Slider {...settings}>\n                {\n                    TrendingTodayMovies.map((movie, i) => {\n                        return <div key={i}>\n                           <div className=\"carousel-item\" key={i} style={{backgroundImage: `url(https://image.tmdb.org/t/p/w1280/${movie.backdrop_path})`}}>\n                               <div className={'slider-text'}>\n                               <h1>Movie DB</h1>\n                               <h3>browse through the biggest movie library</h3>\n                                   <ion-icon size={\"large\"} name=\"arrow-down\"/>\n                               </div>\n                            </div>\n                        </div>\n                    })\n                }\n            </Slider>\n        </div>\n    );\n}\n\nexport default SlickSlider;\n","import React, {useEffect, useState} from \"react\";\nimport List from \"../Components/commons/List\";\nimport Pagination from \"../Components/commons/Pagination\";\nimport MovieProfile from './movieProfile/movieProfile';\nimport SlickSlider from \"../Components/slick-slider/slick-slider\";\nimport {PROXY, API_KEY} from \"../utils\";\nimport \"./App.scss\"\n\n\nfunction HomePage() {\n\n    const [TrendingTodayMovies, setTrending] = useState([]);\n    const [popularMovies, setPopular] = useState([]);\n    const [totalResults, setTotalResults] = useState();\n    const [currentPage, setCurrentPage] = useState(1);\n    const [totalPages, setTotalPages] = useState();\n    const [pagesLink] = useState(0);\n    const [currentMovie, setCurrentMovie] = useState(null);\n    const [movieGenres, setMovieGenres] = useState([]);\n\n\n    //on load, fetch trending, popular and movieGenres\n    useEffect(() => {\n        async function fetchData() {\n            const response = await fetch (`${PROXY}https://api.themoviedb.org/3/trending/all/day${API_KEY}`);\n            const trending = await response.json();\n            setTrending(trending.results);\n        }\n        fetchData();\n\n        async function fetchMovieGenres() {\n            const response = await fetch (`${PROXY}https://api.themoviedb.org/3/genre/movie/list${API_KEY}&language=en-US`);\n            const genres = await response.json();\n            setMovieGenres(genres);\n\n        }\n        fetchMovieGenres();\n    }, []);\n\n    useEffect(() => {\n        async function fetchData() {\n            const response = await fetch (`${PROXY}https://api.themoviedb.org/3/movie/popular?api_key=67b347978ffe14fc5d6f8a664a1829f2&language=en-US&page=${currentPage}`);\n            const popular = await response.json();\n            setPopular(popular.results);\n            setTotalPages(popular.total_pages);\n            setTotalResults(popular.total_results);\n        }\n        fetchData();\n    }, [currentPage]);\n\n\n    const nextPage = (currentPage) => {\n        setCurrentPage(currentPage);\n    };\n\n    const viewMovieInfo = (id) =>{\n        const filteredMovie = popularMovies.filter(movie => movie.id === id);\n        const newCurrentMovie = filteredMovie.length > 0 ? filteredMovie[0]: null;\n        setCurrentMovie(newCurrentMovie);\n\n    };\n\n   const  closeMovieInfo = () => {\n        setCurrentMovie( null);\n    };\n\n    return(\n        <div>\n            {currentMovie === null\n             ?\n            <>\n                <SlickSlider/>\n                <h1>Browse all popular movies</h1>\n                <List\n                    movieList={popularMovies}\n                    viewMovieInfo={viewMovieInfo}\n                />\n                <Pagination\n                     pagesLink={pagesLink}\n                     pages={totalPages}\n                     currentpages={currentPage}\n                     nextPage={nextPage}\n                     currentPage={currentPage}\n                />\n            </>\n            :\n                <MovieProfile\n                    viewMovieInfo={viewMovieInfo}\n                    genre={movieGenres}\n                    currentMovie={currentMovie}\n                    closeMovieInfo={closeMovieInfo}/>\n            }\n        </div>\n    )\n\n}\n\nexport default HomePage;\n\n\n\n\n","import React from 'react'\n\nconst PageNotFound = () => <h1>Oops! page not found.</h1>;\n\nexport default PageNotFound\n","import React from \"react\";\nimport {Switch, Route} from 'react-router-dom';\nimport Search from \"../src/pages/search\"\nimport Popular from \"../src/pages/popular\"\nimport Homepage from \"./pages/Homepage\"\nimport PageNotFound from \"./pages/PageNotFound\"\nimport MovieProfile from \"./pages/movieProfile/movieProfile\";\n\nconst Routes = () =>{\n    return(\n        <Switch>\n            <Route exact path=\"/\" component={Homepage}/>\n           {/* <Route exact path=\"/:MovieProfile\" component={MovieProfile()}/>*/}\n            <Route exact path=\"/popular\" component={Popular}/>\n            <Route exact path=\"/Movie-browse\" component={Homepage}/>\n            <Route exact path=\"/top5\"/>\n            <Route exact path=\"/search/:name\" component={Search}/>\n            <Route component={PageNotFound}/>\n        </Switch>\n    )\n};\n\nexport default Routes;\n","import React from 'react';\nimport Nav from \"./Components/commons/nav\";\nimport Routes from \"./routes\";\nimport './App.css';\n\n  export function App() {\n          return (\n              <div className=\"App\">\n                  <Nav/>\n                  <Routes/>\n              </div>\n          )\n    }\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default {\n    TrendingMovies: [],\n    PopularMovies: [],\n    currentMovieProfile:[],\n    searchResults:[],\n    apiCallsInProgress: 0\n};\n","import {combineReducers} from \"redux\";\nimport homePageReducer from \"./homePageReducer\";\n\nconst rootReducer = combineReducers({\n    homePageReducer,\n\n});\nexport default rootReducer;\n","import * as types from \"../actions/actionTypes\";\nimport initialState from \"./initialState\";\n\nexport default function homePageReducer(state = initialState.TrendingMovies, action) {\n    switch (action.type) {\n        case types.LOAD_TRENDY_MOVIES_SUCCESS:\n            return action.movies;\n        default:\n            return state;\n    }\n}\n","export const LOAD_TRENDY_MOVIES_SUCCESS = 'LOAD_TRENDY_MOVIES_SUCCESS ';\nexport const BEGIN_API_CALL ='BEGIN_API_CALL';\nexport const API_CALL_ERROR = 'API_CALL_ERROR';\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport configureStore from \"./redux/configureStore\";\nimport {Provider as ReduxProvider} from 'react-redux'\n\nlet  store =  configureStore();\n\nReactDOM.render(\n    <ReduxProvider store={store}>\n      <HashRouter>\n            <App />\n      </HashRouter>\n    </ReduxProvider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {createStore, applyMiddleware,compose} from \"redux\";\nimport rootReducer from \"./reducers\";\nimport reduxImmutableStateInvariant from 'redux-immutable-state-invariant'\nimport thunk from \"redux-thunk\";\n\nexport default function configureStore(initialState) {\n\n    //this adds support for redux dev tools\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n    return createStore(\n        rootReducer,\n        initialState,\n        composeEnhancers(applyMiddleware(thunk,reduxImmutableStateInvariant()))\n    );\n}\n"],"sourceRoot":""}