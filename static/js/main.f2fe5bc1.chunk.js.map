{"version":3,"sources":["Components/commons/searchbar.js","Components/commons/nav.js","Components/Card.js","Components/commons/List.js","Components/commons/Pagination.js","pages/movieProfile.js","pages/search.js","pages/popular.js","Components/trendingScroll.js","Components/carousel.js","Components/slick-slider/slick-slider.js","pages/Homepage.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","className","action","to","onSubmit","handleSubmit","method","onChange","handleChange","type","placeholder","onClick","Nav","useState","search","setSearch","setMovieList","history","useHistory","searchItem","e","a","preventDefault","alert","fetch","response1","json","data","results","push","src","alt","target","value","Card","href","viewMovieInfo","movieId","style","backgroundImage","img","title","List","movieList","map","movie","i","key","poster_path","original_title","description","overview","id","Pagination","pagesLink","setPagesLink","pageLinks","arrayOfPageLinks","active","currentPage","nextPage","pages","arr","val","length","slice","chunkArray","MovieProfile","currentMovie","genre_ids","genre","console","log","name","backdrop_path","size","closeMovieInfo","color","cursor","vote_average","release_date","substr","Search","useParams","setTotalResults","movieGenres","setCurrentPage","totalPages","setTotalPages","setCurrentMovie","proxy","useEffect","total_pages","total_results","fetchData","filteredMovie","filter","newCurrentMovie","currentpages","Popular","popularMovies","setPopular","response","popular","TrendingScroll","Carousel","SlickSlider","TrendingTodayMovies","setTrending","trending","settings","dots","fade","infinite","speed","slidesToShow","autoplay","arrows","lazyLoad","totalResults","setMovieGenres","genres","fetchMovieGenres","Routes","exact","path","component","Homepage","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f2fe5bc1.chunk.js","sourcesContent":["import React from \"react\";\nimport {Link} from 'react-router-dom'\n\nfunction SearchBar(props) {\n\n  return(\n      <div  className={'search'}>\n          <form action={<Link to={'/search'}>search</Link>} onSubmit={props.handleSubmit} method={\"GET\"}>\n          <input onChange={props.handleChange}  type=\"text\" placeholder={'search for a movie'}/>\n          <button type={'submit'} onClick={props.handleSubmit} ><Link to={'/search'}>search</Link></button>\n      </form>\n      </div>\n  )\n\n}\n\nexport default SearchBar;","import React, {useState} from \"react\";\nimport {Link, useHistory} from \"react-router-dom\";\nimport SearchBar from \"./searchbar\";\n\n\nfunction Nav() {\n    //const apiKey =  process.env.REACT_APP_API;\n    const [search, setSearch]  = useState('');\n    const  [movieList,  setMovieList]  = useState([]);\n    const proxy = \"https://cors-anywhere.herokuapp.com/\";\n    const history= useHistory();\n\n    //when user searches for a movie, fetch data and set movieList\n    const searchItem = async (e) => {\n        e.preventDefault();\n\n        if(search === \"\"){\n            alert(\"please enter a movie title\")\n        }else{\n            //fetch stream of data\n            const response1 = await fetch(`${proxy}https://api.themoviedb.org/3/search/movie/?api_key=67b347978ffe14fc5d6f8a664a1829f2&query=${search}`);\n            //convert to json\n            const data  = await response1.json();\n\n            setMovieList(data.results);\n            history.push(`/search/${search}`);\n        }\n    };\n\n    //set search while  typing\n    const handleChange = (e) =>{\n\n        setSearch(e.target.value);\n    };\nreturn(\n    <div>\n     <nav className={'nav'}>\n         <div className={\"nav-links\"}>\n             <img src=\"https://www.themoviedb.org/assets/1/v4/logos/primary-green-d70eebe18a5eb5b166d5c1ef0796715b8d1a2cbc698f96d311d62f894ae87085.svg\" alt=\"\"/>\n             <ul>\n             <li><Link to={'/'}>home</Link></li>\n             <li><Link to={'/'}>login</Link></li>\n             <li  className={\"hide\"}><i >search</i></li>\n            </ul>\n         </div>\n         <div className={'nav-search'}>\n            <SearchBar\n                handleSubmit={searchItem}\n                handleChange={handleChange}\n            />\n         </div>\n     </nav>\n    </div>\n\n)\n}\n\nexport default Nav;\n","import React from \"react\";\n\nconst Card  = (props) =>{\n    return(\n        <>\n       <a href={'#'} onClick={()=> props.viewMovieInfo(props.movieId)}>\n           <div className={'cardMovie'} style={{backgroundImage: `url(${props.img})`}} >\n           </div>\n           <p className={\"titleMovie\"}>{props.title}</p>\n       </a>\n\n            </>\n    )\n};\n\nexport default Card\n","import React from \"react\";\nimport Card from \"../Card.js\"\n\nfunction List(props) {\n\n     return(\n\n         <div  className={'list'}>\n               {\n                  props.movieList.map((movie, i) =>{\n\n                     return <Card\n                                key={i}\n                                img={`https://image.tmdb.org/t/p/w200/${movie.poster_path}`}\n                                title={movie.original_title}\n                                description={movie.overview}\n                                viewMovieInfo={props.viewMovieInfo}\n                                movieId={movie.id}\n                            />\n\n                  })\n               }\n         </div>\n     )\n}\n\nexport default List;\n","import React, {useState} from \"react\";\nfunction Pagination(props) {\n\n    const [pagesLink, setPagesLink] =useState(0);\n    const pageLinks=[];\n    const arrayOfPageLinks=[];\n\n    //for every page, create li with its corresponding number, if page is the current page add .active class\n    for(let i =1; i <= props.pages; i++){\n        let active = props.currentPage === i ? 'active': '';\n            pageLinks.push(<li className={` ${active}`} key={i} onClick={()=>{props.nextPage(i)}}>{i}</li>)\n    }\n\n    //slice array of links in smaller arrays of ten, so that you can  display 10 pages at the time\n    function chunkArray(arr,val) {\n        for(let i =0; i <= arr.length; i += val){\n            arrayOfPageLinks.push(arr.slice(i, val + i));\n        }\n    }\n    chunkArray(pageLinks,5);\n\n    //show next set of pages, stop at last page.you could also setPagesLink to 0 to go back to the beginning of your pages\n    const Next = ()=>{\n        if(arrayOfPageLinks.length -1 === pagesLink){\n            setPagesLink(arrayOfPageLinks.length -1)\n        }else{\n            setPagesLink(pagesLink+1);\n        }\n    };\n\n    //same as next, but backwards\n    const Previous = ()=>{\n        if(pagesLink > 0){\n            setPagesLink(pagesLink-1)\n        }\n        if(pagesLink < 0){\n            setPagesLink(pagesLink);\n        }\n    };\n\n    return(\n        <div className={\"container\"}>\n            <div className=\"row\">\n                <ul className={\"pagination\"}>\n                    {pagesLink <= 0? '': <button onClick={Previous}>...</button> }\n\n                    {arrayOfPageLinks[pagesLink]}\n                    <button onClick={Next}>...</button>\n\n                </ul>\n            </div>\n        </div>\n    )\n\n}\nexport default Pagination\n","import React, {useState} from 'react';\nimport \"../utils\"\nimport './movieProfile.scss'\n\nfunction MovieProfile(props) {\nconst [genre, setGenre] =useState();\n\n        function isGenre() {\n\n            return props.genre.id === props.currentMovie.genre_ids[0]\n\n        }\n\n    props.currentMovie.genre_ids.map(id =>{\n        if(id === props.genre.id){\n           console.log(props.genre.name) ;\n            return props.genre.name\n        }else{\n            return \"\"\n        }\n\n\n\n    });\n\n\n        return (\n            <>\n\n            <div className={\"container-profile bg\"}\n                 style={{backgroundImage: `url(https://image.tmdb.org/t/p/w1280/${props.currentMovie.backdrop_path})`}}\n            >\n\n                <div className={'content'}>\n                    <ion-icon size=\"large\" name=\"close-outline\" onClick={props.closeMovieInfo} style={{color: \"whitesmoke\", cursor: \"pointer\"}}/>\n\n                <div className={\"profile-img\"}>\n                   <img src={`https://image.tmdb.org/t/p/w500/${props.currentMovie.poster_path}`} alt={props.currentMovie.title}/>\n                </div>\n                <div className=\"profile-text\">\n\n                    <h2>{props.currentMovie.title}</h2>\n\n                    <div className={'sub-title'}>\n                    <p><small>{props.currentMovie.vote_average === 0 ? \"\": `Rating: ${props.currentMovie.vote_average}` } </small></p>\n                    <p> <small>Release date: {props.currentMovie.release_date.substr(0,4)} </small></p>\n                    <p> <small> {\n\n                    }trailer </small></p>\n                    </div>\n                    <br/>\n                    <p>\n                        {\n                            props.currentMovie.genre_ids.map(id => {\n                                if (id === props.genre.id) {\n                                    console.log(props.genre.name);\n                                    return props.genre.name\n                                } else {\n                                    return \"\"\n                                }\n                            })\n                        }\n\n                        </p>\n                    <p>{props.currentMovie.overview}</p>\n\n                </div>\n                </div>\n\n            </div>\n</>\n        );\n}\n\nexport default MovieProfile;\n","import React, {useEffect, useState} from \"react\";\nimport List from \"../Components/commons/List\";\nimport {useParams} from \"react-router-dom\";\nimport Pagination from \"../Components/commons/Pagination\";\nimport MovieProfile from \"./movieProfile\";\n\nfunction Search() {\n\n    const [movieList, setMovieList] = useState(['hey']);\n    const [search, setSearch] = useState('');\n    const {name} = useParams();\n    const [totalResults, setTotalResults] = useState();\n    const [movieGenres, setMovieGenres] =useState([]);\n\n    const [currentPage, setCurrentPage] = useState(1);\n    const [totalPages, setTotalPages] = useState();\n    const [pagesLink] =useState(0);\n    const [currentMovie, setCurrentMovie] = useState(null);\n\n    const proxy = \"https://cors-anywhere.herokuapp.com/\";\n\n    useEffect(() => {\n        async function fetchData() {\n            //fetch stream of data\n            const response1 = await fetch(`${proxy}https://api.themoviedb.org/3/search/movie/?api_key=67b347978ffe14fc5d6f8a664a1829f2&query=${name}&page=${currentPage}`);\n            //convert to json\n            const data = await response1.json();\n\n            //set json object into moviesList array, every time there is a new search this will refresh itself\n            setMovieList(data.results);\n            setSearch(name);\n            setTotalPages(data.total_pages);\n            setTotalResults(data.total_results);\n        }\n\n        fetchData();\n    }, [name,currentPage]);\n\n\n    const nextPage = (currentPage) => {\n        setCurrentPage(currentPage);\n    };\n\n\n    const viewMovieInfo = (id) =>{\n        const filteredMovie = movieList.filter(movie => movie.id === id);\n        const newCurrentMovie = filteredMovie.length > 0 ? filteredMovie[0]: null;\n        setCurrentMovie(newCurrentMovie);\n    };\n\n    const  closeMovieInfo = () => {\n        setCurrentMovie( null);\n    };\n\n\n    return(\n\n        <div>\n            {currentMovie === null\n             ?\n            <>\n            <h3>Results for: {search}</h3>\n            <List movieList={movieList} viewMovieInfo={viewMovieInfo}/>\n            <div className={\"pagination-with-btn\"}>\n            <Pagination pagesLink={pagesLink} pages={totalPages} currentpages={currentPage}  nextPage={nextPage} currentPage={currentPage}/>\n            </div>\n            </>\n            :\n            <MovieProfile viewMovieInfo={viewMovieInfo} genre={movieGenres} currentMovie={currentMovie} closeMovieInfo={closeMovieInfo}/>\n            }\n            </div>\n    )\n\n}\n\nexport default Search;\n","import React, {useEffect, useState} from \"react\";\nimport List from \"../Components/commons/List\";\n\nfunction Popular() {\n\n    const [popularMovies, setPopular] = useState([]);\n    const proxy = \"https://cors-anywhere.herokuapp.com/\";\n\n    //on load, load List with popular movies\n    useEffect(() => {\n        async function fetchData() {\n            const response = await fetch (`${proxy}https://api.themoviedb.org/3/movie/popular?api_key=67b347978ffe14fc5d6f8a664a1829f2&language=en-US&page=1\n `);\n\n\n\n            const popular = await response.json();\n            setPopular(popular.results);\n        }\n        fetchData();\n    }, []);\n\n\n    return(\n        <div className={'popular-container'}>\n        <h1>Popular movies</h1>\n        <List movieList={popularMovies}/>\n        </div>\n    )\n\n}\n\nexport default Popular;\n","import React from \"react\"\n\nfunction TrendingScroll(props){\n        return (\n            <div className={'wrapper container'}>\n                <h1>Trending right now</h1>\n                <section className={\"carousel\"} id={\"section1\"}>\n                    {\n                        props.movieList.map((movie, i) => {\n                            return <div key={i} className={\"item\"}><img src={`https://image.tmdb.org/t/p/w200/.${movie.poster_path}`} alt=\"\"/></div>\n                        })\n                    }\n                </section>\n            </div>\n\n\n        )\n}\n\nexport default TrendingScroll;\n","import React from \"react\";\nimport \"./../assets/css/slider.scss\"\n/*import 'bootstrap/dist/css/bootstrap.css';*/\n\nfunction Carousel(props) {\n\n    return(\n        <div id=\"carouselExampleIndicators\" className=\"carousel slide\" data-ride=\"carousel\">\n            <ol className=\"carousel-indicators\">\n                {\n                    props.movie.map((movie, i) => {\n                           return <li data-target=\"#carouselExampleIndicators\" data-slide-to={i} className=\"active\"/>\n                    })\n                }\n\n            </ol>\n            <div className=\"carousel-inner\" role={\"listbox\"}>\n                {\n                    props.movie.map((movie, i) => {\n                        if(i === 0){\n                            return   <div className=\"carousel-item active\">\n                                    <img className={\"d-block w-100 \"} src={`https://image.tmdb.org/t/p/w1280/${movie.backdrop_path}`} alt={i}/>\n                                <div className=\"carousel-caption d-none d-md-block\">\n                                    <h3>Browse through the biggest movie library</h3>\n                                </div>\n                                    </div>\n                        }else{\n                            return  <div className=\"carousel-item\">\n                                    <img className={\"d-block w-100 \"} src={`https://image.tmdb.org/t/p/w1280/${movie.backdrop_path}`} alt={i}/>\n                                    </div>\n                        }\n                    })\n                }\n\n            </div>\n           {/* <a className=\"carousel-control-prev\" href=\"#carouselExampleIndicators\" role=\"button\" data-slide=\"prev\">\n                <span className=\"carousel-control-prev-icon\" aria-hidden=\"true\"/>\n                <span className=\"sr-only\">Previous</span>\n            </a>\n            <a className=\"carousel-control-next\" href=\"#carouselExampleIndicators\" role=\"button\" data-slide=\"next\">\n                <span className=\"carousel-control-next-icon\" aria-hidden=\"true\"/>\n                <span className=\"sr-only\">Next</span>\n            </a>*/}\n        </div>\n\n    )\n\n}\n\nexport default Carousel\n","import React,{useState,useEffect} from 'react';\nimport 'slick-carousel/slick/slick.css'\nimport 'slick-carousel/slick/slick-theme.css'\nimport Slider from \"react-slick\";\nimport './App.css';\n\nfunction SlickSlider() {\n\n    const [TrendingTodayMovies, setTrending] = useState([]);\n    const proxy = \"https://cors-anywhere.herokuapp.com/\";\n    //on load, load List with popular movies\n    useEffect(() => {\n        async function fetchData() {\n            const response = await fetch (`${proxy}https://api.themoviedb.org/3/trending/all/day?api_key=67b347978ffe14fc5d6f8a664a1829f2`);\n            const trending = await response.json();\n            setTrending(trending.results);\n        }\n        fetchData();\n    }, []);\n    const settings = {\n        dots: false,\n        fade: true,\n        infinite: true,\n        speed: 200,\n        slidesToShow: 1,\n        autoplay: true,\n        arrows: true,\n        className: 'slides',\n        lazyLoad: true,\n    };\n\n    return (\n        <div className=\"App\">\n            <Slider {...settings}>\n                {\n                    TrendingTodayMovies.map((movie, i) => {\n                        return <div key={i}>\n                           <div className=\"carousel-item\" key={i} style={{backgroundImage: `url(https://image.tmdb.org/t/p/w1280/${movie.backdrop_path})`}}>\n                               <div className={'slider-text'}>\n                               <h1>Movie DB</h1>\n                               <h3>browse through the biggest movie library</h3>\n                                   <ion-icon name=\"arrow-down\"></ion-icon>\n                               </div>\n                            </div>\n                        </div>\n                    })\n                }\n            </Slider>\n        </div>\n    );\n}\n\nexport default SlickSlider;\n","import React, {useEffect, useState} from \"react\";\nimport List from \"../Components/commons/List\";\nimport TrendingScroll from \"../Components/trendingScroll\";\nimport Pagination from \"../Components/commons/Pagination\";\nimport apiCalls from \"../Components/getMovieProfile\";\nimport MovieProfile from './movieProfile';\nimport '../assets/css/slider.scss'\nimport Landing from \"../Components/landingPage\";\nimport Carousel from \"../Components/carousel\";\nimport SlickSlider from \"../Components/slick-slider/slick-slider\";\n\nimport \"./slider.scss\"\n\nfunction Popular() {\n\n    const [TrendingTodayMovies, setTrending] = useState([]);\n    const [popularMovies, setPopular] = useState([]);\n    const proxy = \"https://cors-anywhere.herokuapp.com/\";\n    const [totalResults, setTotalResults] = useState();\n    const [currentPage, setCurrentPage] = useState(1);\n    const [totalPages, setTotalPages] = useState();\n    const [pagesLink, setPagesLink] =useState(0);\n    const [currentMovie, setCurrentMovie] = useState(null);\n    const [movieGenres, setMovieGenres] =useState([]);\n\n\n    //on load, fetch trending, popular and movieGenres\n    useEffect(() => {\n        async function fetchData() {\n            const response = await fetch (`${proxy}https://api.themoviedb.org/3/trending/all/day?api_key=67b347978ffe14fc5d6f8a664a1829f2`);\n            const trending = await response.json();\n            setTrending(trending.results);\n        }\n        fetchData();\n\n        async function fetchMovieGenres() {\n            const response = await fetch (`${proxy}https://api.themoviedb.org/3/genre/movie/list?api_key=67b347978ffe14fc5d6f8a664a1829f2&language=en-US`);\n            const genres = await response.json();\n            setMovieGenres(genres);\n\n        }\n        fetchMovieGenres();\n    }, []);\n\n    useEffect(() => {\n        async function fetchData() {\n            const response = await fetch (`${proxy}https://api.themoviedb.org/3/movie/popular?api_key=67b347978ffe14fc5d6f8a664a1829f2&language=en-US&page=${currentPage}`);\n            const popular = await response.json();\n            setPopular(popular.results);\n            setTotalPages(popular.total_pages);\n            setTotalResults(popular.total_results);\n        }\n        fetchData();\n    }, [currentPage]);\n    console.log(TrendingTodayMovies);\n\n    const nextPage = (currentPage) => {\n        setCurrentPage(currentPage);\n    };\n\n    const viewMovieInfo = (id) =>{\n            const filteredMovie = popularMovies.filter(movie => movie.id === id);\n            const newCurrentMovie = filteredMovie.length > 0 ? filteredMovie[0]: null;\n            setCurrentMovie(newCurrentMovie);\n    };\n\n   const  closeMovieInfo = () => {\n        setCurrentMovie( null);\n    };\n\n\n    return(\n        <div>\n\n\n\n            {currentMovie === null\n             ?\n            <>\n             {/*   <div className={\"wrap\"}>\n                    <div className={\"arrow\"} id={\"arrow-left\"}>  </div>\n                    <div id={\"slider\"}>\n                            {\n                               TrendingTodayMovies.map((movie, i) => {\n\n                                   if(i === 0){\n                                       return   <div className={`slide slide${i}`} style={{backgroundImage: `url('https://image.tmdb.org/t/p/w1280/${movie.backdrop_path}'`, backgroundSize:\"cover\", backgroundRepeat:'no repeat'}}>\n\n\n                                                    <div className={\"slide-content\"}>\n                                                        <img  src={`https://image.tmdb.org/t/p/w1280/${movie.backdrop_path}`} alt={i}/>\n                                                    <span>Movie DB</span>\n                                                    </div>\n                                                </div>\n                                   }else{\n                                       return  <div className={`slide slide${i}`} style={{backgroundImage: `url('https://image.tmdb.org/t/p/w1280/${movie.backdrop_path}'`, backgroundSize:\"cover\", backgroundRepeat:'no repeat'}}>\n\n\n                                           <div className={\"slide-content\"}>\n                                               <img  src={`https://image.tmdb.org/t/p/w1280/${movie.backdrop_path}`} alt={i}/>\n                                               <span>Movie DB</span>\n                                           </div>\n                                       </div>\n                                   }\n                               })\n                            }\n                    </div>\n                    <div className={\"arrow\"} id={\"arrow-right\"}>  </div>\n                </div>*/}\n       {/*   <Carousel movie={TrendingTodayMovies}/>*/}\n       <SlickSlider/>\n        {/*   <Landing movieList={TrendingTodayMovies}/>*/}\n            <TrendingScroll movieList={TrendingTodayMovies}/>\n            <h1>Browse all popular movies</h1>\n            <List movieList={popularMovies} viewMovieInfo={viewMovieInfo}/>\n            {totalResults > 20 ? <Pagination pagesLink={pagesLink} pages={totalPages} currentpages={currentPage}  nextPage={nextPage} currentPage={currentPage}/> : \"\"}\n            </>\n            :\n                <MovieProfile viewMovieInfo={viewMovieInfo} genre={movieGenres} currentMovie={currentMovie} closeMovieInfo={closeMovieInfo}/>\n            }\n        </div>\n    )\n\n}\n\nexport default Popular;\n","import React from \"react\";\nimport {Switch, Route} from 'react-router-dom';\nimport Search from \"../src/pages/search\"\nimport Popular from \"../src/pages/popular\"\nimport Homepage from \"./pages/Homepage\"\n\nconst Routes = () =>{\n    return(\n        <Switch>\n            <Route exact path=\"/\" component={Homepage}/>\n            <Route exact path=\"/popular\" component={Popular}/>\n            <Route exact path=\"/Movie-browse\" component={Popular}/>\n            <Route exact path=\"/top5\"/>\n            <Route exact path=\"/search/:name\" component={Search}/>\n        </Switch>\n    )\n};\n\nexport default Routes;\n","import React from 'react';\nimport Nav from \"./Components/commons/nav\";\nimport Routes from \"./routes\";\n\nimport './App.css';\n\n  export function App() {\n\n\n          return (\n              <div className=\"App\">\n                  <Nav/>\n                  <Routes/>\n              </div>\n          )\n\n    }\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <HashRouter>\n            <App />\n      </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}