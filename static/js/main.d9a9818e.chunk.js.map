{"version":3,"sources":["Components/Card.js","Components/List.js","Components/search.js","Components/nav.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","img","src","alt","title","List","movieList","map","movie","i","key","poster_path","original_title","description","overview","Search","action","onSubmit","handleSubmit","onChange","handleChange","type","placeholder","Nav","App","useState","search","setSearch","setMovieList","popularMovies","setPopular","useEffect","a","fetch","response","json","popular","results","fetchData","searchItem","e","preventDefault","response1","data","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAceA,EAXD,SAACC,GACX,OACI,yBAAKC,UAAW,QAEK,MAAbD,EAAME,IAAe,yBAAKC,IAAI,GAAGC,IAAI,wBAA0B,yBAAKD,IAAKH,EAAME,IAAKE,IAAI,aAE5F,2BAAIJ,EAAMK,SCePC,MArBf,SAAcN,GAET,OAEI,yBAAMC,UAAW,QAERD,EAAMO,UAAUC,KAAI,SAACC,EAAOC,GAEzB,OAAO,kBAAC,EAAD,CACIC,IAAKD,EACLR,IAAG,yCAAoCO,EAAMG,aAC7CP,MAAOI,EAAMI,eACbC,YAAaL,EAAMM,gBCEpCC,MAff,SAAgBhB,GAEd,OACI,yBAAMC,UAAW,UACjB,0BAAMgB,OAAO,GAAGC,SAAUlB,EAAMmB,cAC5B,2BAAOC,SAAUpB,EAAMqB,aAAeC,KAAK,OAAOC,YAAa,uBAE/D,4BAAQD,KAAM,UAAd,aCGKE,MAVf,WACA,OACI,6BACC,yBAAKvB,UAAW,OACZ,yBAAKE,IAAI,4HAA4HC,IAAI,Q,MCmDnIqB,MAnDf,WAAe,MAEgBC,mBAAS,IAFzB,mBAENC,EAFM,KAEEC,EAFF,OAGwBF,mBAAS,IAHjC,mBAGLnB,EAHK,KAGOsB,EAHP,OAIsBH,mBAAS,IAJ/B,mBAINI,EAJM,KAISC,EAJT,KAQbC,qBAAU,WAAM,4CACV,8BAAAC,EAAA,sEAC2BC,MAAK,6GADhC,cACUC,EADV,gBAE0BA,EAASC,OAFnC,OAEUC,EAFV,OAGIN,EAAWM,EAAQC,SAHvB,4CADU,uBAAC,WAAD,wBAMVC,KACH,IAGH,IAAMC,EAAU,uCAAG,WAAOC,GAAP,iBAAAR,EAAA,6DACjBQ,EAAEC,iBADe,SAIOR,MAAM,6FAAD,OAA8FP,IAJ1G,cAIXgB,EAJW,gBAMGA,EAAUP,OANb,OAMXQ,EANW,OASjBf,EAAae,EAAKN,SATD,2CAAH,sDAkBhB,OACE,yBAAKrC,UAAU,OACV,kBAAC,EAAD,MACA,kBAAC,EAAD,CACIkB,aAAcqB,EACdnB,aATW,SAACoB,GACnBb,EAAUa,EAAEI,OAAOC,UAUhB,kBAAC,EAAD,CACGvC,UAAWA,IAEd,kBAAC,EAAD,CAAMA,UAAYuB,MCxCPiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d9a9818e.chunk.js","sourcesContent":["import React from \"react\";\n\n\nconst Card  = (props) =>{\n    return(\n        <div className={'card'} >\n            {\n                props.img == null ?  <img src=\"\" alt=\"no poster available\"/> : <img src={props.img} alt=\"name img\"/>\n            }\n            <p>{props.title}</p>\n        </div>\n    )\n};\n\nexport default Card","import React from \"react\";\nimport Card from \"./Card.js\"\n\nfunction List(props) {\n\n     return(\n\n         <div  className={'list'}>\n               {\n                  props.movieList.map((movie, i) =>{\n                            \n                     return <Card\n                                key={i}\n                                img={`http://image.tmdb.org/t/p/w185/${movie.poster_path}`}\n                                title={movie.original_title}\n                                description={movie.overview}\n                            />\n\n                  })\n               }\n         </div>\n     )\n}\n\nexport default List;","import React from \"react\";\n\nfunction Search(props) {\n\n  return(\n      <div  className={'search'}>\n      <form action=\"\" onSubmit={props.handleSubmit}>\n          <input onChange={props.handleChange}  type=\"text\" placeholder={'search for a movie'}/>\n\n          <button type={'submit'} >search</button>\n\n      </form>\n      </div>\n  )\n\n}\n\nexport default Search;","import React from \"react\";\n\nfunction Nav() {\nreturn(\n    <div>\n     <nav className={'nav'}>\n         <img src=\"//www.themoviedb.org/assets/1/v4/logos/primary-green-d70eebe18a5eb5b166d5c1ef0796715b8d1a2cbc698f96d311d62f894ae87085.svg\" alt=\"\"/>\n     </nav>\n    </div>\n)\n}\n\nexport default Nav;","import React, {useState, useEffect} from 'react';\nimport List from \"./Components/List\";\nimport Search from \"./Components/search\";\nimport Nav from \"./Components/nav\";\nimport './App.css';\n\nfunction App() {\n  //const apiKey =  process.env.REACT_APP_API;\n  const [search, setSearch]  = useState('');\n  const  [movieList,  setMovieList]  = useState([]);\n  const [popularMovies, setPopular] =useState([]);\n\n\n  //on load, load List with popular movies\n  useEffect(() => {\n        async function fetchData() {\n            const response = await fetch (`https://api.themoviedb.org/3/movie/popular?api_key=67b347978ffe14fc5d6f8a664a1829f2&language=en-US&page=1`);\n            const popular = await response.json();\n            setPopular(popular.results);\n        }\n        fetchData();\n  }, []);\n\n  //when user searches for a movie, fetch data and set movieList\n  const searchItem = async (e) => {\n    e.preventDefault();\n\n    //fetch stream of data\n    const response1 = await fetch(`https://api.themoviedb.org/3/search/movie/?api_key=67b347978ffe14fc5d6f8a664a1829f2&query=${search}`);\n    //convert to json\n    const data  = await response1.json();\n\n    //set json object into moviesList array, every time there is a new search this will refresh itself\n    setMovieList(data.results);\n\n  };\n\n  //set search while  typing\n  const handleChange =  (e) =>{\n      setSearch(e.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n         <Nav/>\n         <Search\n             handleSubmit={searchItem}\n             handleChange={handleChange}\n         />\n         <List\n            movieList={movieList}\n         />\n         <List movieList= {popularMovies}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}